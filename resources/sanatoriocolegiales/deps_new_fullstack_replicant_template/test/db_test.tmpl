(ns {{top/ns}}.{{main/ns}}.front-end.db-test
  (:require [clojure.test :refer [deftest is testing run-test]]
            [{{top/ns}}.{{main/ns}}.front-end.db.store :as store]
            [tick.core :as tick]))

(deftest store-api-tests
  (let [estado (store/get-store)
        _ (store/persistir! estado [{:db/ident :system/app
                                     :app/cargado-a-las (tick/time)}]) 
        acciones {:on-error-action [:h1 "Lo sentimos, hubo un error"]
                  :on-load-action [:h1 "Cargando..."]
                  :on-availability-action [:ul 
                                           [:li "a"]
                                           [:li "b"]
                                           [:li "c"]]
                  :else-action [:h1 "No se encontró lo buscado}"]}]
    (testing "Obtiene el id de la app cuando está iniciada"
      (is (number? (store/get-app-id estado)))) 
    (testing "Al estar cargando devuelve load-action"
      (let [_ (store/persistir! estado (store/send-request 1 (tick/now) [:internados]))]
        (is (= [:h1 "Cargando..."] (store/query-status->action estado 1 acciones))))) 
    (testing "Al estar disponible datos devuelve availability-action"
      (let [_ (store/persistir! estado (store/receive-response 1 (tick/now) [:internados] [:datos-recibidos]))]
        (is (= [:ul
                [:li "a"]
                [:li "b"]
                [:li "c"]] 
               (store/query-status->action estado 1 acciones)))))
    (testing "Al haber error devuelve error-action"
      (let [_ (store/persistir! estado (store/receive-response 1 (tick/now) [:internados] {:success? false}))]
        (is (= [:h1 "Lo sentimos, hubo un error"] (store/query-status->action estado 1 acciones)))))
    (testing "Al no haber ident correspondiente devuelve else-action"
      (is (= [:h1 "No se encontró lo buscado}"] (store/query-status->action estado nil acciones))))))


  
(comment
  (run-test store-api-tests)
  :rcf)