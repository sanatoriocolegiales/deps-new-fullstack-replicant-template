(ns build
  (:require [clojure.tools.build.api :as b]
            [aero.core :refer [read-config]]
            [clojure.java.io :as io]))

(defonce conf (read-config (io/resource "config.edn")))
 
(def nombre '{{artifact/id}})
 
(def version 
  (:version conf)
  #_(format "0.0.%s" (b/git-count-revs nil)))
 
(def jar-file (format "target/%s-%s.jar" (name nombre) version))

(def class-dir "target/classes")

(def basis (delay (b/create-basis {:project "deps.edn"})))

(defn clean [_]
  (b/delete {:path "target"}))

(defn uber [_]
  (clean nil)
  (b/copy-dir {:src-dirs ["src" "resources"]
               :target-dir class-dir})
  (b/compile-clj {:basis @basis 
                  :class-dir class-dir})
  (b/uber {:class-dir class-dir
           :uber-file jar-file
           :basis @basis
           :main '{{artifact/id}}/back-end.core}))

(comment
  
  (uber nil)
  
  :rcf)
